<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 注入sessionDao -->
        <property name="sessionDAO" ref="sessionDao"/>
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 全局session有效时间 -->
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="cacheManager" ref="shiroCacheManager"/>
    </bean>

    <!-- 会话DAO，sessionManager里面的session需要保存在会话Dao里，没有会话Dao，session是瞬时的，没法从sessionManager里面拿到session -->
    <bean id="sessionDao" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
        <property name="activeSessionsCacheName" value="bloggerSession"/>
    </bean>

    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:shiro-ehcache.xml"/>
        <!-- 这里是关键！！！没有必错  -->
        <property name="shared" value="true"/>
    </bean>

    <!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
       当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="bloggerSessionId"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
        <property name="domain" value="${blog.host}"/>
        <property name="name" value="54lxb"/>
        <property name="path" value="/"/>
    </bean>

    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 自定义Realm继承自AuthorizingRealm，在其父类AuthenticatingRealm的
    getAuthenticationInfo方法中会调用credentialsMatcher的 doCredentialsMatch
        来验证用户输入用户名密码是否匹配。 -->
    <bean id="blogRealm" class="cn.lxb.blog.other.shiro.realm.BloggerAuthorizingRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="cachingEnabled" value="true"/>
    </bean>

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="blogRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler ">
        <property name="interval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 缓存管理器 -->
    <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="ehCacheManager" />
    </bean>

    <!-- 同一个账号理应同时只能在一台设备上登录，后面登录的踢出前面登录的。 -->
    <bean id="kickOutSessionFilter" class="cn.lxb.blog.other.shiro.filter.KickOutSessionFilter">
        <property name="cacheManager" ref="shiroCacheManager"/>
        <property name="sessionManager" ref="sessionManager"/>
        <!-- 是否踢出后来登录的，默认是false；即后者登录的用户踢出前者登录的用户 -->
        <property name="kickOutAfter" value="false"/>
        <!-- 同一个用户最大的会话数，默认1；比如2的意思是同一个用户允许最多同时两个人登录 -->
        <property name="maxSession" value="1"/>
        <!-- 用户被强制登出的跳转地址 -->
        <property name="kickOutUrl" value="/admin/blogger/logon?kickOut=1"/>
    </bean>

    <!-- Shiro过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 身份认证失败，则跳转到登录页面的配置 -->
        <property name="loginUrl" value="/admin/blogger/logon"/>
        <!-- 身份认证成功，则跳转到后台主页面的配置 -->
        <property name="successUrl" value="/admin/main"/>
        <property name="filters">
            <map>
                <entry key="kickOut" value-ref="kickOutSessionFilter"/>
            </map>
        </property>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <property name="filterChainDefinitions">
            <value>
                /admin/blogger/login=anon
                /admin/blogger/logon=anon
                /admin/blogger/logout=anon
                /static/** = anon
                /upload/** = anon
                /admin/**= kickOut,authc
                /druid/** = kickOut,authc
            </value>
        </property>
    </bean>

    <!-- 用户认证器配置 -->
    <bean id="credentialsMatcher" class="cn.lxb.blog.other.shiro.credentials.RetryLimitCredentialsMatcher">
        <constructor-arg ref="shiroCacheManager"/>
        <!--是否存储散列后的密码为16进制，需要和生成密码时的一样，默认是base64-->
        <property name="storedCredentialsHexEncoded" value="true"/>
        <!-- 加密方式使用MD5 -->
        <property name="hashAlgorithmName" value="md5"/>
        <!-- 加密迭代次数为3次 -->
        <property name="hashIterations" value="3" />
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 开启Shiro注解 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>

    <!-- 将securityManager注入 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>